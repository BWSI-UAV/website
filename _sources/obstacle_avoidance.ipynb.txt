{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AR Obstacle Avoidance\n",
    "In this document, you will learn how to write obstacle avoidance code for your Intel Aero RTF drone, utilizing tools we have already seen in the course of the program.\n",
    "\n",
    "Key tools:\n",
    "+ `ar_track_alvar`\n",
    "+ Closed loop velocity control\n",
    "+ Open loop velocity control"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup for Obstacle Avoidance\n",
    "### Launching Obstacle Avoidance\n",
    "You will be using a launch file to execute obstacle avoidance code called `ar_obstacle.launch`. This launch file will be provided to you in `aero_control` upstream for you to use with your obstacle avoidance code. \n",
    "\n",
    "`ar_obstacle.launch` does a few things:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "- Starts `ar_pose_handler.py`, a transformation node\n",
    "- Starts `ar_obstacle.py`, an avoidance node you will write\n",
    "- Starts MAVROS\n",
    "- Starts the Intel RealSense Camera \n",
    "- Starts `ar_track_alvar`\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "You will also need `aero-optical-flow` and `aero-teraranger.service` running outside of the launch file to be able to fly autonomously.\n",
    "\n",
    "### Necessary Data\n",
    "You will need the ID's of all the AR tags you plan to detect and avoid. These will come in handy later. At the time of publication, these codes were `{24: ring, 12: hurdle, 9: gate}`. They may have changed. You will also need to define a set of desired points that define where the drone should be in relation to each obstacle's AR tag prior to avoidance. You should also estimate how high/low the drone will need to fly to avoid your obstacle of choice. For simplicity's sake, the rest of this notebook will focus on the hurdle.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `ar_obstacle.py` Overview\n",
    "`ar_obstacle.py` needs to do a few different things for **single-obstacle detection**. These tasks may change slightly for multi-obstacle detection.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "1. Identify AR tag detections as obstacles and non-obstacles, and, further, match obstacle AR tags to their corresponding physical obstacles. \n",
    "2. Fly to the obstacle, and get in position to pass through/over/under it. \n",
    "3. Evade the obstacle effectively using pre-determined commands. (this could get fancier if you get it working solidly sans other technical capabilities)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "You will also need to issue a proportional (P) control signal in response to AR tag detections. This control signal should be smoothed using a moving average filter (i.e. track the previous $n$ control signals and average them to create a final control signal).\n",
    "\n",
    "## Breaking down Obstacle Avoidance\n",
    "### Finite-state Machine\n",
    "We recommend that you conceptualize the drone in obstacle detection as what is called a [finite-state machine](https://en.wikipedia.org/wiki/Finite-state_machine). This means that there are a limited number of tasks, or \"states\" that the drone could be occupying. At each time step, you will need to update this state with new information from AR tag detections, pose information, and knowledge of the ordering of tasks needed to complete AR obstacle avoidance. Remember that if no AR tags are detected, it is probably unsafe to continue on your current trajectory.\n",
    "\n",
    "### Flying to Obstacles\n",
    "If you've properly transformed your AR tag detections to the `bu` frame, you will be able to calculate an error based on the location your drone is currently at relative to the AR tag and your desired location with respect to the AR tag. You'll want to generate this error, which, as you may recall, is calculated using $\\vec{e} (t) = (\\vec{r} (t) - \\vec{r}_{des})$ where $\\vec{r}(t)$ is the drone's current position vector. You can also parameterize this calculation:\n",
    "\n",
    "\n",
    "\n",
    "* $ e_x(t) = (x_{des} - x(t)) $\n",
    "* $ e_y(t) = (y_{des} - y(t)) $\n",
    "* $ e_z(t) = (z_{des} - z(t)) $\n",
    "* $ e_{yaw}(t) = (\\theta_{z_{des}} - \\theta_z(t)) $\n",
    "\n",
    "\n",
    "\n",
    "Now that you have the error signals for each relevant degree of freedom, you can create a control signal $c(t)$ using P control: $c_x(t) = K_{P_x} * e_x(t)$. You will have to decide upon a set of P gain values to start with. We recommend that all of these values start below 1. Consider the magnitude of the error in meters or radians, and the desired magnitude of control output in $\\frac{m}{s}$ or $\\frac{rad}{sec}$ when deciding upon initial P gains. \n",
    "\n",
    "You should also check to see whether the error signals are within some threshold that is close enough to centered on the AR tag. If this is the case, you can update your finite state to obstacle avoidance mode. \n",
    "\n",
    "You will now either need to transform these commands into the `lenu` frame or use a `rosservice` call to change the target MAV frame for MAVROS (ask an instructor about this option, not recommended)\n",
    "\n",
    "Once you have done so, you can add the control signals to your running average implementation. \n",
    "\n",
    "### Avoiding Obstacles\n",
    "Before issuing control commands to avoid any given obstacle, consider clearing your running average history. \n",
    "\n",
    "You'll need to use your knowledge of each obstacle to program a series of timed, open-loop control commands that will get the drone through the obstacle without crashing. You will also need to determine how to time your obstacle run (i.e. when do you initialize the time counter for passing through an obstacle?)\n",
    "\n",
    "Example obstacle avoidance (doesn't correspond to any real obstacle, commands are given in `bu` frame):\n",
    "\n",
    "\n",
    "\n",
    "- Positive z (0.3 m/s) for 3 seconds\n",
    "- Negative y (0.2 m/s) for 3 seconds\n",
    "- Negative z (0.2 m/s) for 3 seconds\n",
    "\n",
    "\n",
    "### Converting Velocities\n",
    "You will need to write code similar to that which you used in the open loop challenge. You will need to convert `bu` commands to the `lenu` frame such that the drone flies with expected behavior. The function in which you will write this code is titled `convert_vel(self,vel_msg)` and takes a `geometry_msgs/TwistStamped` as an argument.\n",
    "\n",
    "After issuing these commands, you'll need to re-evaluate your finite state. **This part is critical for multi-obstacle avoidance!**\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other Boilerplate\n",
    "We will give you code to asynchronously publish velocity commands so that offboard mode will run successfully, as well as code that checks the drone state and limits movement until in offboard mode. \n",
    "\n",
    "## Checkpoints\n",
    "### Graphing \"Fly-to-obstacle\" error\n",
    "Reaching this checkpoint requires publishing your error in x,y,z, and yaw to RQT using a `geometry_msgs/Twist` or similar message. Show us the graph while holding the drone in range of an obstacle AR tag. \n",
    "\n",
    "### Publishing \"Fly-to-obstacle\" velocities\n",
    "Reaching this checkpoint requires successfully publishing velocities to `/mavros/setpoint_velocity/cmd_vel` when in range of an obstacle AR tag. Show us this topic with `rostopic echo` to reach this checkpoint.\n",
    "\n",
    "### Setting Obstacle Times/Velocities\n",
    "Reaching this checkpoint requires showing us your fully preset obstacle avoidance times and velocities as defined in `ar_obstacle.py`. We will check them to make sure they are reasonable/within a safe and acceptable range of the instructor solution. We will then allow you to test your code in flight. \n",
    "\n",
    "### Ring Avoidance\n",
    "Successfully avoiding the ring from start to finish will earn this checkpoint.\n",
    "\n",
    "### Hurdle Avoidance\n",
    "Successfully avoiding the hurdle from start to finish will earn this checkpoint.\n",
    "\n",
    "### Gate Avoidance\n",
    "Successfully avoiding the gate from start to finish will earn this checkpoint.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
